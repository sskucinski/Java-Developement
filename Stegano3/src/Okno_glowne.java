import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;



public class Okno_glowne extends JFrame {
	
	private String stat_sciezka = "";
	private String stat_nazwa = "";
	private String text = "";
	private String kod = "";
	private String kodMsg = "";

    /**
     * Creates new form Okno_glowne
     */
    public Okno_glowne() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void initComponents() {

        jButtonWczytaj = new JButton();
        jButtonWstaw = new JButton();
        jButtonOdczytaj = new JButton();
        jButtonZapisz = new JButton();
        jTextField1 = new JTextField();
        jTextField2 = new JTextField();
        jTextField3 = new JTextField();
        jPanel2 = new JPanel();
        jScrollPane2 = new JScrollPane();
        jLabel1 = new JLabel();
        jPanel3 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jLabel2 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jButtonWczytaj.setText("Wczytaj");
        jButtonWczytaj.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonWczytajActionPerformed(evt);
            }
        });

        jButtonWstaw.setText("Wstaw");
        jButtonWstaw.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonWstawActionPerformed(evt);
            }
        });

        jButtonOdczytaj.setText("Odczytaj");
        jButtonOdczytaj.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOdczytajActionPerformed(evt);
            }
        });

        jButtonZapisz.setText("Zapisz");
        jButtonZapisz.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonZapiszActionPerformed(evt);
            }
        });

       
        jScrollPane2.setViewportView(jLabel1);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 300, GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 350, GroupLayout.PREFERRED_SIZE)
        );

        
        jScrollPane1.setViewportView(jLabel2);

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 300, GroupLayout.PREFERRED_SIZE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 350, GroupLayout.PREFERRED_SIZE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonWczytaj, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonZapisz, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOdczytaj)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonWstaw, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonWczytaj)
                    .addComponent(jButtonZapisz)
                    .addComponent(jButtonOdczytaj)
                    .addComponent(jButtonWstaw))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }
    public void update()
	{
		jTextField1.setText("");
		//jTextField2.setText("");
		jLabel1.setIcon(null);
		jLabel2.setIcon(null);
		stat_sciezka = "";				
		stat_nazwa = "";				
	}
    
    private static BufferedImage getImage(String f)
	{
		BufferedImage 	image	= null;
		File 		file 	= new File(f);
		
		try
		{
			image = ImageIO.read(file);
		}
		catch(Exception ex)
		{
			System.out.println("Problem z obrazkiem...");
		}
		return image;
	}

    private void jButtonZapiszActionPerformed(ActionEvent evt) {
    	if(stat_sciezka == "" || stat_nazwa == ""){
    		JOptionPane.showMessageDialog(this, "Najpierw nale¿y wstawiæ ukryty napis do BitMapy!", 
    				"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
    	} else {
    		String rozszerzenie = "bmp";
    		String nazwaNowego = JOptionPane.showInputDialog(this,
				"Enter output file name:", "File name",
				JOptionPane.PLAIN_MESSAGE);

    		BufferedImage buffIMG = getImage(stat_sciezka + "/" + stat_nazwa + ".bmp");
    		try{
    			
    			Decode_Encode_LSB.encode(buffIMG,text,kod, jTextField3.getText(), stat_sciezka + "/" + nazwaNowego + ".bmp");  		
    		
    			JOptionPane.showMessageDialog(this, "Plik zapisano poprawnie!", 
    				"Powodzenie!", JOptionPane.INFORMATION_MESSAGE);
    		}
    		catch(Exception ex)
    		{
    			JOptionPane.showMessageDialog(this, "Nie mo¿na zapisaæ pliku!", 
    				"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
    		}
    	}
    }

    private void jButtonOdczytajActionPerformed(ActionEvent evt) {
    	update();
    	JFileChooser chooser = new JFileChooser("./");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setFileFilter(new Filtr_rozszerzen());
		int returnVal = chooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION){
			File directory = chooser.getSelectedFile();
			try{
				String image = directory.getPath();
				
				stat_nazwa = directory.getName();
				stat_sciezka = directory.getPath();
				stat_sciezka = stat_sciezka.substring(0,stat_sciezka.length()-stat_nazwa.length()-1);
				stat_nazwa = stat_nazwa.substring(0, stat_nazwa.length()-4);
				
				jLabel1.setIcon(new ImageIcon(ImageIO.read(new File(image))));
			}
			catch(Exception except) {
			//msg if opening fails
			JOptionPane.showMessageDialog(this, "Nie mo¿na otworzyæ pliku!", 
				"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
			}
		}
    	
		BufferedImage buffIMG = getImage(stat_sciezka + "/" + stat_nazwa + ".bmp");
		
    	String message;
		try {
			message = Decode_Encode_LSB.decode(buffIMG, jTextField2.getText().toString(), jTextField3.getText().toString());
			JOptionPane.showMessageDialog(this, "Obrazek zosta³ poprawnie odkodowany!", 
					"Powodzenie!", JOptionPane.INFORMATION_MESSAGE);
			jTextField1.setText(message);
			
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Obraz nie mo¿e byæ odkodowany!", 
					"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
		}
		
    	
    }

    private void jButtonWstawActionPerformed(ActionEvent evt) {
    	if(stat_sciezka == "" || stat_nazwa == ""){
    		JOptionPane.showMessageDialog(this, "Najpierw nale¿y Wczytaæ BitMapê!", 
					"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
    	} else{
    		try {
    			text = jTextField1.getText();
    			kod = jTextField2.getText();
    			kodMsg = jTextField3.getText();
    			jLabel2.setIcon(new ImageIcon(ImageIO.read(new File(stat_sciezka + "/" + stat_nazwa + ".bmp"))));
    			JOptionPane.showMessageDialog(this, "Poprawnie wstawiono napis!", 
    					"Powodzenie!", JOptionPane.INFORMATION_MESSAGE);
    			jTextField1.setText("");
    				
    		} catch (IOException e) {
				e.printStackTrace();
    		}
    	}    	
    }
    

    private void jButtonWczytajActionPerformed(ActionEvent evt) {
    	    	
    	JFileChooser chooser = new JFileChooser("./");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setFileFilter(new Filtr_rozszerzen());
		int returnVal = chooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION){
			File directory = chooser.getSelectedFile();
			try{
				String image = directory.getPath();
				
				stat_nazwa = directory.getName();
				stat_sciezka = directory.getPath();
				stat_sciezka = stat_sciezka.substring(0,stat_sciezka.length()-stat_nazwa.length()-1);
				stat_nazwa = stat_nazwa.substring(0, stat_nazwa.length()-4);
				
				jLabel1.setIcon(new ImageIcon(ImageIO.read(new File(image))));
			}
			catch(Exception except) {
			//msg if opening fails
			JOptionPane.showMessageDialog(this, "Nie mo¿na otworzyæ pliku!", 
				"B³¹d!", JOptionPane.INFORMATION_MESSAGE);
			}
		}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Okno_glowne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Okno_glowne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Okno_glowne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Okno_glowne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Okno_glowne().setVisible(true);
            }
        });
    }
    
    private JButton jButtonOdczytaj;
    private JButton jButtonWczytaj;
    private JButton jButtonWstaw;
    private JButton jButtonZapisz;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextField jTextField1;
    private JTextField jTextField2;
    private JTextField jTextField3;
    
}
